// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

pub enum ComponentOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Component<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Component<'a> {
  type Inner = Component<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Component<'a> {
  pub const VT_NAME: flatbuffers::VOffsetT = 4;
  pub const VT_UNIT: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Component { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args ComponentArgs<'args>
  ) -> flatbuffers::WIPOffset<Component<'bldr>> {
    let mut builder = ComponentBuilder::new(_fbb);
    if let Some(x) = args.unit { builder.add_unit(x); }
    if let Some(x) = args.name { builder.add_name(x); }
    builder.finish()
  }


  #[inline]
  pub fn name(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Component::VT_NAME, None)}
  }
  #[inline]
  pub fn unit(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(Component::VT_UNIT, None)}
  }
}

impl flatbuffers::Verifiable for Component<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("name", Self::VT_NAME, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("unit", Self::VT_UNIT, false)?
     .finish();
    Ok(())
  }
}
pub struct ComponentArgs<'a> {
    pub name: Option<flatbuffers::WIPOffset<&'a str>>,
    pub unit: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for ComponentArgs<'a> {
  #[inline]
  fn default() -> Self {
    ComponentArgs {
      name: None,
      unit: None,
    }
  }
}

pub struct ComponentBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> ComponentBuilder<'a, 'b> {
  #[inline]
  pub fn add_name(&mut self, name: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Component::VT_NAME, name);
  }
  #[inline]
  pub fn add_unit(&mut self, unit: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Component::VT_UNIT, unit);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> ComponentBuilder<'a, 'b> {
    let start = _fbb.start_table();
    ComponentBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Component<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Component<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Component");
      ds.field("name", &self.name());
      ds.field("unit", &self.unit());
      ds.finish()
  }
}
pub enum DimensionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct Dimension<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Dimension<'a> {
  type Inner = Dimension<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> Dimension<'a> {
  pub const VT_COMPONENTS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    Dimension { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args DimensionArgs<'args>
  ) -> flatbuffers::WIPOffset<Dimension<'bldr>> {
    let mut builder = DimensionBuilder::new(_fbb);
    if let Some(x) = args.components { builder.add_components(x); }
    builder.finish()
  }


  #[inline]
  pub fn components(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Component<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Component>>>>(Dimension::VT_COMPONENTS, None)}
  }
}

impl flatbuffers::Verifiable for Dimension<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Component>>>>("components", Self::VT_COMPONENTS, false)?
     .finish();
    Ok(())
  }
}
pub struct DimensionArgs<'a> {
    pub components: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Component<'a>>>>>,
}
impl<'a> Default for DimensionArgs<'a> {
  #[inline]
  fn default() -> Self {
    DimensionArgs {
      components: None,
    }
  }
}

pub struct DimensionBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> DimensionBuilder<'a, 'b> {
  #[inline]
  pub fn add_components(&mut self, components: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Component<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Dimension::VT_COMPONENTS, components);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> DimensionBuilder<'a, 'b> {
    let start = _fbb.start_table();
    DimensionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Dimension<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for Dimension<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("Dimension");
      ds.field("components", &self.components());
      ds.finish()
  }
}
pub enum NPYOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct NPY<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for NPY<'a> {
  type Inner = NPY<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> NPY<'a> {
  pub const VT_DIMS: flatbuffers::VOffsetT = 4;
  pub const VT_DATA: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    NPY { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
    args: &'args NPYArgs<'args>
  ) -> flatbuffers::WIPOffset<NPY<'bldr>> {
    let mut builder = NPYBuilder::new(_fbb);
    if let Some(x) = args.data { builder.add_data(x); }
    if let Some(x) = args.dims { builder.add_dims(x); }
    builder.finish()
  }


  #[inline]
  pub fn dims(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Dimension<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Dimension>>>>(NPY::VT_DIMS, None)}
  }
  #[inline]
  pub fn data(&self) -> Option<flatbuffers::Vector<'a, i8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, i8>>>(NPY::VT_DATA, None)}
  }
}

impl flatbuffers::Verifiable for NPY<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<Dimension>>>>("dims", Self::VT_DIMS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, i8>>>("data", Self::VT_DATA, false)?
     .finish();
    Ok(())
  }
}
pub struct NPYArgs<'a> {
    pub dims: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<Dimension<'a>>>>>,
    pub data: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, i8>>>,
}
impl<'a> Default for NPYArgs<'a> {
  #[inline]
  fn default() -> Self {
    NPYArgs {
      dims: None,
      data: None,
    }
  }
}

pub struct NPYBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> NPYBuilder<'a, 'b> {
  #[inline]
  pub fn add_dims(&mut self, dims: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<Dimension<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NPY::VT_DIMS, dims);
  }
  #[inline]
  pub fn add_data(&mut self, data: flatbuffers::WIPOffset<flatbuffers::Vector<'b , i8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(NPY::VT_DATA, data);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> NPYBuilder<'a, 'b> {
    let start = _fbb.start_table();
    NPYBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<NPY<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for NPY<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("NPY");
      ds.field("dims", &self.dims());
      ds.field("data", &self.data());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `NPY`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_npy_unchecked`.
pub fn root_as_npy(buf: &[u8]) -> Result<NPY, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<NPY>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `NPY` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_npy_unchecked`.
pub fn size_prefixed_root_as_npy(buf: &[u8]) -> Result<NPY, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<NPY>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `NPY` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_npy_unchecked`.
pub fn root_as_npy_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NPY<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<NPY<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `NPY` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_npy_unchecked`.
pub fn size_prefixed_root_as_npy_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<NPY<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<NPY<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a NPY and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `NPY`.
pub unsafe fn root_as_npy_unchecked(buf: &[u8]) -> NPY {
  flatbuffers::root_unchecked::<NPY>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed NPY and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `NPY`.
pub unsafe fn size_prefixed_root_as_npy_unchecked(buf: &[u8]) -> NPY {
  flatbuffers::size_prefixed_root_unchecked::<NPY>(buf)
}
#[inline]
pub fn finish_npy_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<NPY<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_npy_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<NPY<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
